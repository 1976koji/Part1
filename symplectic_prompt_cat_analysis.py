

# ---------- 猫コーパス ----------
# =========================================
# 🐱 日本語猫コーパス（100 文）
# =========================================
cats_100 = [
    "私は猫が好きだ。",
    "黒猫のつややかな毛並みを見ると心が落ち着く。",
    "猫のゴロゴロという喉鳴らしは最高の癒やしだ。",
    "朝日を浴びて伸びをする猫の姿が愛おしい。",
    "子猫が段ボール箱の中で丸まって眠っている。",
    "三毛猫の模様は世界に二つと同じものがない。",
    "猫は好奇心旺盛で、すぐ高い所に登りたがる。",
    "狭い隙間に器用に入り込むのは猫ならではだ。",
    "肉球のぷにぷにした感触がたまらない。",
    "雨の日、窓辺で外を眺める猫の横顔が詩的だ。",
    "夜更けに静かに歩く猫の足音はほとんど聞こえない。",
    "猫は紙袋を見ると必ずと言っていいほど潜り込む。",
    "緑色の瞳がランプのように暗闇で光る。",
    "キャットタワーのてっぺんは彼らの特等席だ。",
    "猫じゃらしを振ると目を輝かせて飛びつく。",
    "毛づくろいに余念がなく、常に身だしなみは完璧。",
    "魚の匂いがすると台所へ一直線に走って来る。",
    "ダンボールを噛んでボロボロにするのが日課。",
    "日向ぼっこをしている姿はまるで彫刻のよう。",
    "夕暮れ時、路地裏で猫同士が挨拶を交わしていた。",
    "長毛種はブラッシングすると雲のような毛が舞う。",
    "猫カフェでは時間が経つのを忘れてしまう。",
    "ご飯の時間になると鈴のような声で鳴いて催促する。",
    "ショッピングサイトで猫用おやつを大量購入した。",
    "猫は新しい段ボール箱を見つけると即座に支配する。",
    "スコティッシュフォールドの折れた耳がキュートだ。",
    "カーテンによじ登られて穴が開いた。",
    "ソファの隅で香箱座りをしている。",
    "猫は人間の言葉の抑揚をよく聞き分けるという。",
    "猫草を食べて胃を整える賢さに感心する。",
    "早朝、枕元で小さくニャーと鳴き起こしてくれる。",
    "お腹を見せてゴロンと転がるのは信頼の証。",
    "ごはん皿の音だけで飛んでくる聴覚の鋭さ。",
    "猫用のトンネルおもちゃで延々と遊んでいる。",
    "キャットウォークを作ったら部屋が立体的に使われ始めた。",
    "猫の鳴き声には18種類以上のパターンがあるらしい。",
    "フリスキーを開封すると袋の音に敏感に反応。",
    "シュレッダーした紙片の上でふみふみを始めた。",
    "キジトラ柄は森のカモフラージュ模様だ。",
    "猫の尻尾は感情のバロメーター。",
    "玄関で出迎えるときの小走りが可愛い。",
    "こたつから顔だけ出して寝落ちしている。",
    "読書を始めると必ず本の上に座る。",
    "鳥のさえずりに反応してテレビをタッチする。",
    "毛玉を吐いた後は少し申し訳なさそうな表情。",
    "砂のトイレを丁寧に掘ってから用を足す。",
    "窓ガラスに映る自分の姿にパンチを繰り出す。",
    "おもちゃのレーザーポインタを全力で追いかける。",
    "猫背と言うが、丸まった背中は優雅でもある。",
    "ねずみのおもちゃをくわえて戦利品として持ってくる。",
    "白猫は月光を浴びると幽玄な雰囲気を醸す。",
    "キッチンカウンターに乗らないでと何度注意したことか。",
    "引き出しを開ける音でおやつだと悟る。",
    "玄関マットの上で腹ばいになって人間を待つ。",
    "すり寄ってくるときの頬の柔らかさが好きだ。",
    "猫が膝に乗ると身動きがとれなくなる「猫拘束」。",
    "高速でしっぽを振るのは不機嫌のサイン。",
    "首輪の鈴がチリンと鳴るたびに所在がわかる。",
    "夜中に大運動会を開催して家が揺れる。",
    "キャットフードのパッケージを開けると目が真剣になる。",
    "布団に潜り込んで足を温めてくれる。",
    "聞き慣れない来客の声に警戒して隠れる。",
    "歯磨きガムを噛む姿が意外とワイルド。",
    "獣医さんの診察台では固まって石像のよう。",
    "トートバッグを置くと中に入り旅支度ごっこ。",
    "寝言で小さくニャッと鳴く夜もある。",
    "朝のストレッチで背中を反らす姿がヨガの達人。",
    "ふわふわの尻尾で顔を撫でられてくすぐったい。",
    "猫がいるだけで部屋の空気が柔らかくなる。",
    "段ボール迷路を作ったら探検隊長になった。",
    "キャットニップ入りのおもちゃで酔っぱらう様子が面白い。",
    "背中をトントンするとトロンと目を細める。",
    "窓辺で蝶を目で追うハンターの表情。",
    "階段を一段飛ばしで駆け上がる跳躍力。",
    "スマホの画面を猫用ゲームにすると真剣そのもの。",
    "コーヒー豆の匂いには興味を示さない。",
    "クリスマスツリーをよじ登り飾りを落とす事件。",
    "雷が鳴るとクローゼットの奥へ避難。",
    "シャンプー後のドライヤータイムは大騒ぎ。",
    "窓の結露を舐めて怒られる。",
    "長いひげは夜間のナビゲーション装置。",
    "ごろんと横になりお腹を撫でてアピール。",
    "猫規格の幅の細い棚を歩くバランス感覚。",
    "新しい匂いの服をクンクンとチェック。",
    "タブレットのペン先を狙って狩りをする。",
    "洗濯ネットを見ると病院を連想して逃げ腰。",
    "友達の犬とは適度な距離感を保つ。",
    "鍵のジャラジャラ音に反応して玄関へ。",
    "猫用ブラシを見ると喜んで頭を押し付ける。",
    "猫は家につくと言うが、人にもちゃんと懐く。",
    "箸置きを転がしてサッカーを始める。",
    "電気ストーブの前を独占して動かない。",
    "鳴き声で時刻を知らせる正確な腹時計。",
    "サングラスをかけた写真が SNS でバズった。",
    "ツンデレな態度も魅力の一部だ。",
    "録画した鳥動画をテレビに映すと大興奮。",
    "キャリーケースを見ると旅行か病院かで表情が変わる。",
    "人間のくしゃみに驚いて尻尾が膨らむ。",
    "おやつの袋を隠す場所をすでに学習している。",
    "今日も「私は猫が好きだ」と再確認した。"
]         # ← 先ほどの 100 文コーパス


# ===========================================
#  動的ペア抽出 + ペア別 Iξ 評価 版
# ===========================================
import os, statistics, tqdm, openai, numpy as np
from janome.tokenizer import Tokenizer

# ---------------- 0) OpenAI 設定 ----------------
#openai.api_key = os.getenv("OPENAI_API_KEY", "XXX")  # ←要変更
MODEL_GEN   = "gpt-4o-mini"
MODEL_EMBED = "text-embedding-3-large"
MAX_TOK     = 50
TOP_P       = 0.95

# ---------------- 1) コーパス -------------------
#from cats_corpus import cats_100   # 100 文

# ---------------- 2) 動的ペア抽出 ---------------
PAIR_DICT = {
    "猫": "子猫",
    "肉球": "足裏",
    "黒猫": "黒い猫",
    "三毛猫": "三毛",
}
tokenizer = Tokenizer(wakati=True)

def extract_pairs(seed: str):
    nouns = set(tokenizer.tokenize(seed))
    pairs = []
    for w in nouns:
        if w in PAIR_DICT:
            pairs.append((w, PAIR_DICT[w]))
        elif w in PAIR_DICT.values():
            k = [k for k, v in PAIR_DICT.items() if v == w][0]
            pairs.append((k, w))
    return pairs                       # list[(a,b)]

# ---------------- 3) 埋め込み with キャッシュ -----
_emb_cache = {}
def embed(text: str):
    if text not in _emb_cache:
        vec = openai.embeddings.create(model=MODEL_EMBED,
                                       input=text).data[0].embedding
        _emb_cache[text] = np.asarray(vec, dtype=np.float32)
    return _emb_cache[text]

# ---------------- 4) 保存量 Iξ -------------------
def I_xi(q, p, pairs):
    """複数ペアがあれば平均を返す"""
    vals = []
    for a, b in pairs:
        e_a, e_b = embed(a), embed(b)
        A = np.outer(e_b, e_a) - np.outer(e_a, e_b)
        vals.append(float(p @ (A @ q)))
    return float(np.mean(vals)) if vals else None

# ---------------- 5) Symp-prompt ---------------
def build_symp_prompt(seed: str, pairs):
    if pairs:
        joined = "、".join(f"{a}⇄{b}" for a, b in pairs)
        pair_part = f"（例：{joined}）"
    else:
        pair_part = "（本行にはペアなし）"
    return (
        f"{seed}\n"
        "以下の文脈で用いられた固有語・同義語ペアを保持し、"
        "文体・リズムを変えずに続きを 50 token 生成してください。\n"
        f"制約：出現済みの語 {pair_part} は "
        "同一表現または対応ペアのみ許可し、他の置換語は導入しない。"
    )

def generate(seed, T, symp=False):
    prompt = (build_symp_prompt(seed, extract_pairs(seed))
              if symp else f"{seed}\n続きの 50 token を書いてください。")
    resp = openai.chat.completions.create(
        model     = MODEL_GEN,
        messages  = [{"role":"user","content": prompt}],
        max_tokens  = MAX_TOK,
        temperature = T,
        top_p       = TOP_P,
    )
    return resp.choices[0].message.content

# ---------------- 6) 評価ループ -----------------
def run_series(name, T, symp=False):
    drifts, Ivals = [], []
    for seed in tqdm.tqdm(cats_100, desc=f"{name}@T={T}"):
        gen   = generate(seed, T, symp)
        q, p  = embed(seed), embed(gen)
        drifts.append(np.linalg.norm(q - p))
        I_val = I_xi(q, p, extract_pairs(seed))
        if I_val is not None:
            Ivals.append(I_val)
    mean_drift = statistics.mean(drifts)
    var_I      = statistics.variance(Ivals) if len(Ivals) > 1 else float("nan")
    print(f"{name}: D_drift={mean_drift:.6f} , Var(I_xi)={var_I:.6e}  "
          f"({len(Ivals)}/{len(drifts)} seeds)")
    return mean_drift, var_I

# ---------------- 7) 実行 -----------------------
if __name__ == "__main__":
    results = {}
    for T in (1.0, 0.7):
        results[("plain", T)] = run_series("plain", T, symp=False)
    results[("symp_dyn", 0.7)] = run_series("symp_dyn", 0.7, symp=True)

    print("\n=== summary ===")
    for k, (d, v) in results.items():
        print(f"{k}: drift={d:.6f}  var={v:.6e}")
